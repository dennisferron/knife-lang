
source(projectNamespace, relations) ::= <<
// Generated Source

#include "$projectNamespace$.hpp"

#include <iostream>

namespace $projectNamespace$
{
    $relations:defn_relation();separator="\n\n"$
} // namespace $projectNamespace$
>>

defn_relation(rel) ::= <<
    $defn_constructor(rel)$

    $defn_print(rel)$

    $defn_bind(rel)$

    $defn_step(rel)$
>>

defn_constructor(rel) ::= <<
$rel.name$::$rel.name$($rel.parm_lvars:parm_lvar();separator=", "$)
    : $rel.parm_lvars:save_parm();separator=", "$
{
}
>>

parm_lvar(v) ::= <<lvar<$v.type$> $v.name$>>
save_parm(v) ::= <<$v.name$($v.name$)>>

defn_print(rel) ::= <<
std::ostream& $rel.name$::print(std::ostream& os, int nesting)
{
    return print_tabs(os, nesting) << "$rel.name$("
        $rel.rslt_vars:print_result_var();separator=" << \",\"\n"$ << ")";
}
>>

print_result_var(v) ::= << << cached_result.$v.name$>>

defn_bind(rel) ::= <<
bool $rel.name$::bind(Environment& env)
{
    checkpoint = env.save_checkpoint();

    bool success = $rel.rslt_vars:bind_var();separator="\n\t\t\t&& "$;

    if (!success)
        env.revert_to_checkpoint(checkpoint);

    return success;
}
>>

bind_var(v) ::= <<env.eq($v.name$, &cached_result.$v.name$)>>

defn_step(rel) ::= <<
bool $rel.name$::step(Environment& env, int& var_counter)
{
    if (next_step > 0)  // Remove previous bindings
        env.revert_to_checkpoint(checkpoint);

    switch (next_step)
    {
    $rel.step_cases:step_case();separator="\n"$
    default:
        env.revert_to_checkpoint(checkpoint);
        next_step = -1;
        return false;
    }
}
>>

step_case(c) ::= <<
    case $c.number$:
        $select_case_template(c)$
>>

select_case_template(c) ::= <<$(c.template)(c)$>>

case_set_result(c) ::= <<
        next_step = $c.next_step$;
        cached_result = Result { $c.result:{v|"$v$"};separator=", "$ };
        if (bind(env))
            return true;
        // else fall thru
>>

case_init_sub_rel(c) ::= <<
        $c.prev_rels:del_prev_rel();separator="\n"$
        $c.fresh_vars:init_fresh();separator="\n"$
        $c.init_rels:init_sub_rel();separator="\n"$
        next_step = $c.next_step$;
        // fall-through
>>

del_prev_rel(r) ::= <<
        delete $r.rel_name$;
        $r.rel_name$ = nullptr;
>>

init_fresh(v) ::= <<
        $v.var_name$ = { ++var_counter, "$v.var_name$" };
>>

init_sub_rel(r) ::= <<
        $r.rel_name$ = new $r.rel_type$($r.rel_args;separator=", "$);
>>

select_statement(s) ::= <<$(s.template)(s.args)$;>>

print_statement(args) ::= <<std::cout << "$args.var$=" << $args.var$ << "\\n">>
assign_statement(args) ::= <<$args.assignee$ = $args.expr$>>
return_statement(args) ::= <<return $args.value$>>
