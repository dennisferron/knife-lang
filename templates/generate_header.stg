
header(projectNamespace, relations) ::= <<
// Generated Header 

#include "Environment.hpp"
#include "DataTypes.hpp"

namespace $projectNamespace$
{
    $relations:fwd_decl_relation();separator="\n"$

    $relations:decl_relation();separator="\n"$
}  // namespace $projectNamespace$
>>

fwd_decl_relation(rel) ::= <<class $rel.name$;>>

decl_relation(rel) ::= <<
class $rel.name$
{
private:
    int next_step = 0;
    std::size_t checkpoint = 0;

    $rel.parm_lvars:decl_lvar();separator="\n"$
    $rel.fresh_lvars:decl_lvar();separator="\n"$
    $rel.mbrs:decl_mbr();separator="\n"$

    struct Result
    {
    	$rel.rslt_vars:decl_result_var();separator="\n"$
    } cached_result;

    bool bind(Environment& env);

public:
    $rel.name$($rel.parm_lvars:parm_lvar();separator=", "$);
    void reset();

    bool step(Environment& env, int& var_counter);

    std::ostream& print(std::ostream& os, int nesting);
};
>>

// This is used to declare both param (constructor) lvars
// and fresh lvars in the relation class.
decl_lvar(v) ::= <<lvar<$v.type$> $v.name$; // $v.comment$>>
decl_result_var(v) ::= <<$v.type$ $v.name$; // $v.comment$>>

decl_mbr(m) ::= <<$m.type$* $m.name$ = nullptr;>>

// This is used for param lvars in the relation class
// constructor args.
parm_lvar(v) ::= <<lvar<$v.type$> $v.name$>>
